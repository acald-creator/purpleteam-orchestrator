version: "3.7"

networks:
  pt-net:
    ipam:
      config:
       - subnet: 172.25.0.0/24

services:
  redis:
    image: redis:alpine
    networks:
      pt-net:
    ports:
     - "6379:6379"

  app-scanner:
    depends_on:
     - redis
    networks:
      pt-net:
        ipv4_address: 172.25.0.120
    ports:
     - "3000:3000"
    build:
      context: ../../purpleteam-app-scanner/
      # Build-time args
      args:
        LOCAL_USER_ID: ${APP_SCANNER_USER_ID}
        LOCAL_GROUP_ID: ${APP_SCANNER_GROUP_ID}
    environment:
      - NODE_ENV=local
      - AWS_ACCESS_KEY_ID=arbitrary_aws_access_key_id
      - AWS_SECRET_ACCESS_KEY=arbitrary_aws_secret_access_key
    # Following values are analogous to their Dockerfile counterparts:
    # -i : Keep STDIN open even if not attached
    # -t : Allocate a pseudo-tty
    stdin_open: true
    tty: true
    container_name: pt-app-scanner-cont
    volumes:
     - type: bind
       source: ${HOST_DIR}
       target: /var/log/purpleteam/outcomes

  orchestrator:
    depends_on:
     - redis
    # Use type host until we can test link
    networks:
      pt-net:
        ipv4_address: 172.25.0.110
    ports:
     - "2000:2000"
    build:
      context: ../
      # Build-time args
      args:
        LOCAL_USER_ID: ${ORCHESTRATOR_USER_ID}
        LOCAL_GROUP_ID: ${ORCHESTRATOR_GROUP_ID}
    environment:
     - NODE_ENV=local
    # Following values are analogous to their Dockerfile counterparts:
    # -i : Keep STDIN open even if not attached
    # -t : Allocate a pseudo-tty
    stdin_open: true
    tty: true
    container_name: pt-orchestrator-cont
    volumes:
     - type: bind
       source: ${HOST_DIR}
       target: /var/log/purpleteam/outcomes

